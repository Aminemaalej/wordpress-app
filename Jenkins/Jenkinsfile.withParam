// Manually triggered with Parameters
ENVIRONMENT_MAP = [Staging: 'staging', Production: 'production']
REGION_MAP = [Ireland: 'eu-west-1', Singapore: 'ap-southeast-1', America: 'us-east-1']

pipeline {
    agent any

    parameters {
        choice(name: 'environmentToDeploy', choices: ['Staging', 'Production'], description: 'Select the environment to deploy')
        choice(name: 'regionToDeploy', choices: ['Ireland', 'Singapore', 'America'], description: 'Select the regions to deploy')
        // choice(name: 'workflow', choices: ['apply', 'destroy'], description: 'Select terraform workflow') 
    }

    environment {
        AWS_CREDS = 'terraform-user'
    }

    stages {
        stage('Checkout') {
            steps {
                git url: 'https://github.com/Aminemaalej/wordpress-app.git', branch: 'main'
            }
        }

        stage('Terraform Init') {
            steps {
                script {
                        dir("Terraform") {
                            withCredentials([aws(accessKeyVariable : 'AWS_ACCESS_KEY_ID', credentialsId: "${AWS_CREDS}", secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                                echo "Initializing Terraform in"
                                sh """
                                    terraform init
                                """
                            }
                        }
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                script {
                    def environment = ENVIRONMENT_MAP[params.environmentToDeploy]                    
                    // selectedRegions.each { region ->
                        def selectedRegion = REGION_MAP[params.regionToDeploy]
                        echo "Planning in ${environment} for ${selectedRegion}"
                        
                        dir("Terraform") {
                            withCredentials([aws(accessKeyVariable : 'AWS_ACCESS_KEY_ID', credentialsId: "${AWS_CREDS}", secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                                sh """
                                    terraform plan -var-file="./tfvars/${environment}/${selectedRegion}.tfvars"
                                """
                            }
                        }
                    // }
                }
            }
        }

        // stage('Terraform Apply/Destroy') {
        //     steps {
        //         script {
        //             def environment = ENVIRONMENT_MAP[params.environmentToDeploy]
        //             def selectedRegions = params.regionToDeploy.tokenize(',')
                    
        //             selectedRegions.each { region ->
        //                 def selectedRegion = REGION_MAP[region.trim()]
        //                 echo "Planning in ${environment} for ${selectedRegion}"
                        
        //                 dir("Terraform") {
        //                     withCredentials([aws(accessKeyVariable : 'AWS_ACCESS_KEY_ID', credentialsId: "${AWS_CREDS}", secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
        //                         sh """
        //                             terraform ${workflow} --auto-approve -var-file="./tfvars/${environment}/${selectedRegion}.tfvars"
        //                         """
        //                     }
        //                 }
        //             }
        //         }
        //     }
        // }
    }

    // post {
    //     always {
    //         cleanWs()
    //     }
    //     failure {
    //         mail to: 'aminemaalej96@gmail.com',
    //              subject: "FAILED: Terraform Jenkins Staging Pipeline",
    //              body: "Pipeline failed. Please check the logs."
    //         script {
    //             if ("${env.BRANCH_NAME}" == main) {
    //                 slacksend channel: '#jenkins', teamDomain: 'nasdaq', color: 'danger', message "FAILURE in ${env.JOB_NAME} (#${env.BUILD_ID}\n ${env.BUILD_URL})", tokenCredentialId: 'slack-token'
    //             }
    //         }
    //     }
    // }
}